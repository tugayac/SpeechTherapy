package SpeechTherapy;

import it.sauronsoftware.jave.AudioAttributes;
import it.sauronsoftware.jave.AudioInfo;
import it.sauronsoftware.jave.Encoder;
import it.sauronsoftware.jave.EncoderException;
import it.sauronsoftware.jave.EncoderProgressListener;
import it.sauronsoftware.jave.EncodingAttributes;
import it.sauronsoftware.jave.FFMPEGLocator;
import it.sauronsoftware.jave.InputFormatException;
import it.sauronsoftware.jave.MultimediaInfo;
import java.io.File;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author tugayac
 */
public class MainWindow extends javax.swing.JFrame {
    private static final String[] INFO_TABLE_COLUMN_NAMES = {"File Name", "Bit Rate", "Channel", "Sampling Rate", "Decoder"};
    private OSDetector os;
    
    private File[] inputFiles;
    private int progress = 0;
    private volatile Thread spawningThread;
    private volatile ArrayList<EncodeThread> encodingThreads;
    private ArrayList<File> outputFiles;
    
    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
        this.stopButton.setEnabled(false);
        this.os = new OSDetector();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        inputInformationPanel = new javax.swing.JPanel();
        videoFileChooserButton = new javax.swing.JButton();
        inputVideoFilePathTextField = new javax.swing.JFormattedTextField();
        videoFileLabel = new javax.swing.JLabel();
        infoTableScrollPane = new javax.swing.JScrollPane();
        infoTable = new javax.swing.JTable();
        outputSettingsPanel = new javax.swing.JPanel();
        outputLocationTextField = new javax.swing.JFormattedTextField();
        selectLocationButton = new javax.swing.JButton();
        outputLocationLabel = new javax.swing.JLabel();
        audioFileTypeLabel = new javax.swing.JLabel();
        extractButton = new javax.swing.JButton();
        audioFileTypeComboBox = new javax.swing.JComboBox();
        sampleTextField = new javax.swing.JTextField();
        sampleUnitLabel = new javax.swing.JLabel();
        sampleLabel = new javax.swing.JLabel();
        bitRateUnitLabel = new javax.swing.JLabel();
        bitRateTextField = new javax.swing.JFormattedTextField();
        bitRateLabel = new javax.swing.JLabel();
        spinnerLabel = new javax.swing.JLabel();
        channelSpinner = new javax.swing.JSpinner();
        stopButton = new javax.swing.JButton();
        progressInformationPanel = new javax.swing.JPanel();
        currentProgressBarLabel = new javax.swing.JLabel();
        currentProgressBar = new javax.swing.JProgressBar();
        overallProgressBarLabel = new javax.swing.JLabel();
        overallProgressBar = new javax.swing.JProgressBar();
        completedFilesListScrollPane = new javax.swing.JScrollPane();
        completedFilesList = new javax.swing.JList();
        completedFilesLabel = new javax.swing.JLabel();
        fileInformationPanel = new javax.swing.JPanel();
        fileInfoFileNameLabel = new javax.swing.JLabel();
        fileInfoBitRateLabel = new javax.swing.JLabel();
        fileInfoSamplingRateLabel = new javax.swing.JLabel();
        fileInfoChannelsLabel = new javax.swing.JLabel();
        fileInfoFileTypeLabel = new javax.swing.JLabel();
        fileInfoFileNameValueLabel = new javax.swing.JLabel();
        fileInfoBitRateValueLabel = new javax.swing.JLabel();
        fileInfoSamplingRateValueLabel = new javax.swing.JLabel();
        fileInfoChannelsValueLabel = new javax.swing.JLabel();
        fileInfoFileTypeValueLabel = new javax.swing.JLabel();
        fileInfoBitRateUnitLabel = new javax.swing.JLabel();
        fileInfoSamplingRateUnitLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Audio Extractor");

        inputInformationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Input Information"));

        videoFileChooserButton.setText("Select File");
        videoFileChooserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                videoFileChooserButtonActionPerformed(evt);
            }
        });

        inputVideoFilePathTextField.setToolTipText("Enter the path for the video file");
        inputVideoFilePathTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputVideoFilePathTextFieldActionPerformed(evt);
            }
        });

        videoFileLabel.setText("Input Video File(s):");

        infoTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        infoTableScrollPane.setViewportView(infoTable);

        javax.swing.GroupLayout inputInformationPanelLayout = new javax.swing.GroupLayout(inputInformationPanel);
        inputInformationPanel.setLayout(inputInformationPanelLayout);
        inputInformationPanelLayout.setHorizontalGroup(
            inputInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inputInformationPanelLayout.createSequentialGroup()
                .addComponent(videoFileLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(inputVideoFilePathTextField)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(videoFileChooserButton))
            .addComponent(infoTableScrollPane, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        inputInformationPanelLayout.setVerticalGroup(
            inputInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inputInformationPanelLayout.createSequentialGroup()
                .addGroup(inputInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputVideoFilePathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(videoFileChooserButton)
                    .addComponent(videoFileLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(infoTableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        outputSettingsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Output Settings"));

        selectLocationButton.setText("Select Location");
        selectLocationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectLocationButtonActionPerformed(evt);
            }
        });

        outputLocationLabel.setText("Output Location:");

        audioFileTypeLabel.setText("Audio File Type:");

        extractButton.setText("Extract");
        extractButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                extractButtonActionPerformed(evt);
            }
        });

        audioFileTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "MP3", "AAC", "FLAC", "OGG", "WAV" }));
        audioFileTypeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                audioFileTypeComboBoxActionPerformed(evt);
            }
        });

        sampleTextField.setText("44100");

        sampleUnitLabel.setText("kHz");

        sampleLabel.setText("Sample:");

        bitRateUnitLabel.setText("kb/s");

        bitRateTextField.setText("256");

        bitRateLabel.setText("Bit Rate:");

        spinnerLabel.setText("Channels:");

        channelSpinner.setValue(2);

        stopButton.setText("Stop");
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout outputSettingsPanelLayout = new javax.swing.GroupLayout(outputSettingsPanel);
        outputSettingsPanel.setLayout(outputSettingsPanelLayout);
        outputSettingsPanelLayout.setHorizontalGroup(
            outputSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(outputSettingsPanelLayout.createSequentialGroup()
                .addComponent(outputLocationLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(outputLocationTextField)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(selectLocationButton))
            .addGroup(outputSettingsPanelLayout.createSequentialGroup()
                .addComponent(bitRateLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bitRateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bitRateUnitLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(sampleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sampleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sampleUnitLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(spinnerLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(channelSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(audioFileTypeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(audioFileTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 69, Short.MAX_VALUE)
                .addComponent(extractButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(stopButton))
        );
        outputSettingsPanelLayout.setVerticalGroup(
            outputSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(outputSettingsPanelLayout.createSequentialGroup()
                .addGroup(outputSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(outputLocationLabel)
                    .addComponent(outputLocationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectLocationButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(outputSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bitRateLabel)
                    .addComponent(bitRateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bitRateUnitLabel)
                    .addComponent(sampleLabel)
                    .addComponent(sampleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sampleUnitLabel)
                    .addComponent(spinnerLabel)
                    .addComponent(channelSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(audioFileTypeLabel)
                    .addComponent(audioFileTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(extractButton)
                    .addComponent(stopButton)))
        );

        progressInformationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Progress Information"));

        currentProgressBarLabel.setText("Current Progress:");

        currentProgressBar.setMaximum(1000);
        currentProgressBar.setStringPainted(true);

        overallProgressBarLabel.setText("Overall Progress:");

        overallProgressBar.setMaximum(1000);
        overallProgressBar.setStringPainted(true);

        completedFilesListScrollPane.setViewportView(completedFilesList);

        completedFilesLabel.setText("Completed Files:");

        fileInformationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("File Information"));

        fileInfoFileNameLabel.setText("File Name:");

        fileInfoBitRateLabel.setText("Bit Rate:");

        fileInfoSamplingRateLabel.setText("Sampling Rate:");

        fileInfoChannelsLabel.setText("Channels:");

        fileInfoFileTypeLabel.setText("File Type:");

        fileInfoFileNameValueLabel.setText("N/A");

        fileInfoBitRateValueLabel.setText("N/A");

        fileInfoSamplingRateValueLabel.setText("N/A");

        fileInfoChannelsValueLabel.setText("N/A");

        fileInfoFileTypeValueLabel.setText("N/A");

        fileInfoBitRateUnitLabel.setText("kb/s");

        fileInfoSamplingRateUnitLabel.setText("kHz");

        javax.swing.GroupLayout fileInformationPanelLayout = new javax.swing.GroupLayout(fileInformationPanel);
        fileInformationPanel.setLayout(fileInformationPanelLayout);
        fileInformationPanelLayout.setHorizontalGroup(
            fileInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fileInformationPanelLayout.createSequentialGroup()
                .addGroup(fileInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(fileInfoBitRateLabel)
                    .addComponent(fileInfoFileNameLabel)
                    .addComponent(fileInfoSamplingRateLabel)
                    .addGroup(fileInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(fileInfoFileTypeLabel)
                        .addComponent(fileInfoChannelsLabel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fileInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(fileInformationPanelLayout.createSequentialGroup()
                        .addGroup(fileInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(fileInfoFileTypeValueLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
                            .addComponent(fileInfoChannelsValueLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(fileInfoSamplingRateValueLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(fileInfoBitRateValueLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(fileInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(fileInfoSamplingRateUnitLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(fileInfoBitRateUnitLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE))
                        .addGap(0, 170, Short.MAX_VALUE))
                    .addGroup(fileInformationPanelLayout.createSequentialGroup()
                        .addComponent(fileInfoFileNameValueLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        fileInformationPanelLayout.setVerticalGroup(
            fileInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fileInformationPanelLayout.createSequentialGroup()
                .addGroup(fileInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fileInfoFileNameLabel)
                    .addComponent(fileInfoFileNameValueLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fileInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fileInfoBitRateLabel)
                    .addComponent(fileInfoBitRateValueLabel)
                    .addComponent(fileInfoBitRateUnitLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fileInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fileInfoSamplingRateLabel)
                    .addComponent(fileInfoSamplingRateValueLabel)
                    .addComponent(fileInfoSamplingRateUnitLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fileInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fileInfoChannelsLabel)
                    .addComponent(fileInfoChannelsValueLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fileInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fileInfoFileTypeLabel)
                    .addComponent(fileInfoFileTypeValueLabel))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout progressInformationPanelLayout = new javax.swing.GroupLayout(progressInformationPanel);
        progressInformationPanel.setLayout(progressInformationPanelLayout);
        progressInformationPanelLayout.setHorizontalGroup(
            progressInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(progressInformationPanelLayout.createSequentialGroup()
                .addGroup(progressInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(progressInformationPanelLayout.createSequentialGroup()
                        .addGroup(progressInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, progressInformationPanelLayout.createSequentialGroup()
                                .addComponent(currentProgressBarLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(progressInformationPanelLayout.createSequentialGroup()
                                .addComponent(overallProgressBarLabel)
                                .addGap(7, 7, 7)))
                        .addGroup(progressInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(overallProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE)
                            .addComponent(currentProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(fileInformationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(progressInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(completedFilesListScrollPane)
                    .addGroup(progressInformationPanelLayout.createSequentialGroup()
                        .addComponent(completedFilesLabel)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        progressInformationPanelLayout.setVerticalGroup(
            progressInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(progressInformationPanelLayout.createSequentialGroup()
                .addGroup(progressInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(currentProgressBarLabel)
                    .addComponent(currentProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(completedFilesLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(progressInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(progressInformationPanelLayout.createSequentialGroup()
                        .addGroup(progressInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(overallProgressBarLabel)
                            .addComponent(overallProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(fileInformationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(completedFilesListScrollPane)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(progressInformationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(outputSettingsPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(inputInformationPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(inputInformationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(outputSettingsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressInformationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(32, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void videoFileChooserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_videoFileChooserButtonActionPerformed
        JFileChooser inputFileChooser = new JFileChooser("Select a video file to extract its audio");
        inputFileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        inputFileChooser.setMultiSelectionEnabled(true);
        setFileChooserExtensionFilters(inputFileChooser);
        
        int returnValue = inputFileChooser.showOpenDialog(this);
        if(returnValue == JFileChooser.APPROVE_OPTION) {
            this.inputFiles = inputFileChooser.getSelectedFiles();
            this.encodingThreads = new ArrayList<>(this.inputFiles.length);
            this.outputFiles = new ArrayList<>(this.inputFiles.length);
            if(this.inputFiles.length == 1) {
                this.inputVideoFilePathTextField.setText(inputFileChooser.getSelectedFile().getAbsolutePath());
            } else {
                generateInputFileNamesString();
            }
            this.outputLocationTextField.setText(inputFileChooser.getCurrentDirectory().toString());
            
            getFileInfoForTable();
        } else if (returnValue == JFileChooser.ERROR_OPTION) {
            JOptionPane.showMessageDialog(this, "An error has occured while trying to open the file", "File Open Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_videoFileChooserButtonActionPerformed

    private void inputVideoFilePathTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputVideoFilePathTextFieldActionPerformed
        // Nothing to do
    }//GEN-LAST:event_inputVideoFilePathTextFieldActionPerformed

    private void extractButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_extractButtonActionPerformed
        final String location = this.outputLocationTextField.getText();
        
        final AudioContext ac = new AudioContext(this.bitRateTextField.getText() + "000", this.channelSpinner.getValue().toString(), this.sampleTextField.getText(), this.audioFileTypeComboBox.getSelectedItem().toString().toLowerCase());
        
        String temp = "";
        switch(ac.getFiletype()) {
            case "mp3":
                temp = "libmp3lame";
                break;
            case "aac":
                temp = "libfaac";
                break;
            case "flac":
                temp = "flac";
                break;
            case "wav":
                temp = "pcm_s16le";
                break;
            case "ogg":
                temp = "libvorbis";
                break;
            default:
                break;
        }
        final String codec = temp;
        
        AudioAttributes audio = new AudioAttributes();
        audio.setCodec(codec);
        audio.setBitRate(ac.getBitrate());
        audio.setChannels(ac.getChannel());
        audio.setSamplingRate(ac.getSamplingRate());
        EncodingAttributes attrs = new EncodingAttributes();
        attrs.setFormat(ac.getFiletype());
        attrs.setAudioAttributes(audio);
        
        this.spawningThread = new SpawnThread(ac, attrs, location);
        this.spawningThread.start();
    }//GEN-LAST:event_extractButtonActionPerformed

    private void selectLocationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectLocationButtonActionPerformed
        JFileChooser outputLocationFileChooser = new JFileChooser("Select a location for the audio");
        outputLocationFileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        
        int ret = outputLocationFileChooser.showOpenDialog(this);
        if(ret == JFileChooser.APPROVE_OPTION) {
            this.outputLocationTextField.setText(outputLocationFileChooser.getSelectedFile().getAbsolutePath());
        } else if (ret == JFileChooser.ERROR_OPTION) {
            JOptionPane.showMessageDialog(this, "An error has occured while trying to select a directory", "Directory Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_selectLocationButtonActionPerformed

    private void audioFileTypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_audioFileTypeComboBoxActionPerformed
        // Nothing to do
    }//GEN-LAST:event_audioFileTypeComboBoxActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        int i = 0;
        for (EncodeThread thread : this.encodingThreads) {
            if (thread.isAlive()) {
                thread.stop();
                thread = null;
            }
            i++;
        }
        this.spawningThread.stop();
        this.spawningThread = null;
        System.gc(); // Force garbage collection
        this.encodingThreads.clear();
        this.currentProgressBar.setValue(0);
        this.progress = 0;
        this.overallProgressBar.setValue(0);
        JOptionPane.showMessageDialog(this, "Extraction has been terminated. Make sure to remove any incomplete files", "Process Terminated", JOptionPane.WARNING_MESSAGE);
    }//GEN-LAST:event_stopButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */       
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    private void setFileChooserExtensionFilters(JFileChooser fc) {
        FileNameExtensionFilter filter = new FileNameExtensionFilter("MPEG4 Files (*.mp4, *.m4a)", "mp4", "m4a");
        fc.setFileFilter(filter);
        filter = new FileNameExtensionFilter("AVI Files (*.avi)", "avi");
        fc.setFileFilter(filter);
        filter = new FileNameExtensionFilter("QuickTime Files (*.mov)", "mov");
        fc.setFileFilter(filter);
        filter = new FileNameExtensionFilter("FLV Files (*.flv)", "flv");
        fc.setFileFilter(filter);
        filter = new FileNameExtensionFilter("MPEG Files (*.mpeg, *.mpg)", "mpeg", "mpg");
        fc.setFileFilter(filter);
    }

    private void generateInputFileNamesString() {
        StringBuilder inputFileNames = new StringBuilder();
        inputFileNames.append(this.inputFiles[0]).append(", ");
        for (int i = 1; i < this.inputFiles.length - 1; i++) {
            inputFileNames.append(this.inputFiles[i].getName()).append(",");
        }
        inputFileNames.append(this.inputFiles[this.inputFiles.length - 1].getName());
        this.inputVideoFilePathTextField.setText(inputFileNames.toString());
    }

    private void getFileInfoForTable() {
        Encoder encoder;
        if(os.isMac()) {
            FFMPEGLocator ffmpegLocation = new FFMPEGLocator() {

                @Override
                protected String getFFMPEGExecutablePath() {
                    String input = JOptionPane.showInputDialog(MainWindow.this, "Macintosh Operating System detected. Please enter the location of the ffmpeg executable:", "FFMpeg Folder", JOptionPane.INFORMATION_MESSAGE);
                    if (input != null) {
                        return input;
                    } else {
                        System.exit(1);
                    }
                    return null;
                }
            };
            encoder = new Encoder(ffmpegLocation);
        } else {
            encoder = new Encoder();
        }
        
        DefaultTableModel dtm = new DefaultTableModel(INFO_TABLE_COLUMN_NAMES, 0);
        this.infoTable.setModel(dtm);
        
        File source;
        AudioInfo audioInfo;
        ArrayList<Object> data = new ArrayList<>();
        for (int i = 0; i < this.inputFiles.length; i++) {
            source = new File(this.inputFiles[i].getAbsolutePath());
            data.clear();
            try {
                audioInfo = encoder.getInfo(source).getAudio();
                
                data.add(this.inputFiles[i].getName());
                data.add(audioInfo.getBitRate());
                data.add(audioInfo.getChannels());
                data.add(audioInfo.getSamplingRate());
                data.add(audioInfo.getDecoder());
                
                dtm.addRow(data.toArray());
            } catch (InputFormatException ex) {
                ex.printStackTrace();
            } catch (EncoderException ex) {
                ex.printStackTrace();
            }
        }
    }
    
    private class SpawnThread extends Thread {
        private AudioContext ac;
        private String location;
        private EncodingAttributes attrs;
        
        public SpawnThread(AudioContext ac, EncodingAttributes attrs, String location) {
            this.ac = ac;
            this.attrs = attrs;
            this.location = location;
        }
        
        @Override
        public void run() {
            DefaultListModel<String> completedListModel = new DefaultListModel<>();
            MainWindow.this.completedFilesList.setModel(completedListModel);

            for (int i = 0; i < MainWindow.this.inputFiles.length; i++) {
                MainWindow.this.outputFiles.add(new File(location + "\\" + MainWindow.this.inputFiles[i].getName() + "." + ac.getFiletype()));

                setOutputInformationLabels(MainWindow.this.inputFiles[i], ac);

                try {
                    MainWindow.this.encodingThreads.add(new EncodeThread(MainWindow.this.inputFiles[i], MainWindow.this.outputFiles.get(i), attrs));
                    MainWindow.this.encodingThreads.get(i).start();
                    MainWindow.this.encodingThreads.get(i).join();
                } catch (InterruptedException ex) {
                    Thread.currentThread().interrupt();
                } 
                completedListModel.addElement(MainWindow.this.outputFiles.get(i).getName());
            }
        }
        
        private void setOutputInformationLabels(File source, AudioContext ac) {
            MainWindow.this.fileInfoFileNameValueLabel.setText(source.getName());
            MainWindow.this.fileInfoBitRateValueLabel.setText(Integer.toString(ac.getBitrate()));
            MainWindow.this.fileInfoSamplingRateValueLabel.setText(Integer.toString(ac.getSamplingRate()));
            MainWindow.this.fileInfoChannelsValueLabel.setText(Integer.toString(ac.getChannel()));
            MainWindow.this.fileInfoFileTypeValueLabel.setText(MainWindow.this.audioFileTypeComboBox.getSelectedItem().toString());
        }
    }
    
    private class EncodeThread extends Thread {
        private File source;
        private File target;
        private EncodingAttributes attrs;
        
        public EncodeThread(File source, File target, EncodingAttributes attrs) {
            this.source = source;
            this.target = target;
            this.attrs = attrs;
        }
        
        @Override
        public void run() {
            Encoder encoder = new Encoder();
            EncoderProgressListener epl = new EncoderProgressListener() {
                private int currentProgress;
                
                @Override
                public void sourceInfo(MultimediaInfo mi) {
                    // Nothing to do
                }
                
                @Override
                public void progress(int i) {
                    MainWindow.this.currentProgressBar.setValue(i);
                    MainWindow.this.progress += (i - currentProgress);
                    this.currentProgress = i;
                    MainWindow.this.overallProgressBar.setValue(MainWindow.this.progress / MainWindow.this.inputFiles.length);
                }

                @Override
                public void message(String string) {
                    // Nothing to do
                }
            };
            try {
                encoder.encode(this.source, this.target, this.attrs, epl);
            } catch (IllegalArgumentException ex) {
                ex.printStackTrace();
            } catch (InputFormatException ex) {
                ex.printStackTrace();
            } catch (EncoderException ex) {
                ex.printStackTrace();
            }
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox audioFileTypeComboBox;
    private javax.swing.JLabel audioFileTypeLabel;
    private javax.swing.JLabel bitRateLabel;
    private javax.swing.JFormattedTextField bitRateTextField;
    private javax.swing.JLabel bitRateUnitLabel;
    private javax.swing.JSpinner channelSpinner;
    private javax.swing.JLabel completedFilesLabel;
    private javax.swing.JList completedFilesList;
    private javax.swing.JScrollPane completedFilesListScrollPane;
    private javax.swing.JProgressBar currentProgressBar;
    private javax.swing.JLabel currentProgressBarLabel;
    private javax.swing.JButton extractButton;
    private javax.swing.JLabel fileInfoBitRateLabel;
    private javax.swing.JLabel fileInfoBitRateUnitLabel;
    private javax.swing.JLabel fileInfoBitRateValueLabel;
    private javax.swing.JLabel fileInfoChannelsLabel;
    private javax.swing.JLabel fileInfoChannelsValueLabel;
    private javax.swing.JLabel fileInfoFileNameLabel;
    private javax.swing.JLabel fileInfoFileNameValueLabel;
    private javax.swing.JLabel fileInfoFileTypeLabel;
    private javax.swing.JLabel fileInfoFileTypeValueLabel;
    private javax.swing.JLabel fileInfoSamplingRateLabel;
    private javax.swing.JLabel fileInfoSamplingRateUnitLabel;
    private javax.swing.JLabel fileInfoSamplingRateValueLabel;
    private javax.swing.JPanel fileInformationPanel;
    private javax.swing.JTable infoTable;
    private javax.swing.JScrollPane infoTableScrollPane;
    private javax.swing.JPanel inputInformationPanel;
    private javax.swing.JFormattedTextField inputVideoFilePathTextField;
    private javax.swing.JLabel outputLocationLabel;
    private javax.swing.JFormattedTextField outputLocationTextField;
    private javax.swing.JPanel outputSettingsPanel;
    private javax.swing.JProgressBar overallProgressBar;
    private javax.swing.JLabel overallProgressBarLabel;
    private javax.swing.JPanel progressInformationPanel;
    private javax.swing.JLabel sampleLabel;
    private javax.swing.JTextField sampleTextField;
    private javax.swing.JLabel sampleUnitLabel;
    private javax.swing.JButton selectLocationButton;
    private javax.swing.JLabel spinnerLabel;
    private javax.swing.JButton stopButton;
    private javax.swing.JButton videoFileChooserButton;
    private javax.swing.JLabel videoFileLabel;
    // End of variables declaration//GEN-END:variables
}
